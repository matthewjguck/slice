# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Slicer.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QLabel
import slice

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 400)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.sliceButton = QtWidgets.QPushButton(self.centralwidget)
        self.sliceButton.setGeometry(QtCore.QRect(140, 250, 120, 32))
        self.sliceButton.setDefault(True)
        self.sliceButton.setObjectName("pushButton")
        self.uploadButton = QtWidgets.QPushButton(self.centralwidget)
        self.uploadButton.setGeometry(QtCore.QRect(140, 40, 120, 32))
        self.uploadButton.setDefault(False)
        self.uploadButton.setFlat(False)
        self.uploadButton.setObjectName("pushButton_2")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(180, 200, 42, 22))
        self.spinBox.setObjectName("spinBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 180, 120, 16))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")

        ## Image viewer
        self.ImageView = ImagePreviewLabel(self.centralwidget)  # Create an instance of ImagePreviewLabel
        self.ImageView.setGeometry(QtCore.QRect(10, 90, 381, 71))
        self.ImageView.setText("")
        self.ImageView.setObjectName("ImageView")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setSizeGripEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        
        ## Button Triggers
        self.sliceButton.clicked.connect(self.clickedSlice)
        self.uploadButton.clicked.connect(self.clickedUpload)
        self.spinBox.valueChanged.connect(self.ImageView.updateNumSlices)
        ##

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def clickedUpload(self):
        filePath = slice.getImage(self.centralwidget)  # Get the image file path
        if filePath:
            self.imagePath = filePath  # Store the selected image path in the instance.
            self.ImageView.setImagePath(filePath)  # Display the image
        else:
            print("No file selected.")

    def clickedSlice(self):
        if hasattr(self, 'imagePath'):
            slices = self.spinBox.value()  # Get the number of slices from the spinBox.
            if slices > 0:
                # Let the user choose the save directory.
                saveDir = str(QFileDialog.getExistingDirectory(self.centralwidget, "Select Save Directory"))
                if saveDir:
                    slice.sliceImage(self.imagePath, slices, saveDir)
                else:
                    print("No save directory selected.")
            else:
                print("Please enter a valid number of slices.")
        else:
            print("Please upload an image first.")
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Slice"))
        self.sliceButton.setText(_translate("MainWindow", "Slice!"))
        self.uploadButton.setText(_translate("MainWindow", "Upload Image"))
        self.label.setText(_translate("MainWindow", "How many slices?"))


from PyQt5.QtCore import Qt

class ImagePreviewLabel(QLabel):
    def __init__(self, parent=None):
        super(ImagePreviewLabel, self).__init__(parent)
        self.numSlices = 0
        self.imagePath = ''  # Keep track of the current image path

    def setNumSlices(self, numSlices):
        self.numSlices = numSlices
        self.repaint()  # Trigger a repaint to update the slice lines

    def updateNumSlices(self, value):
        self.numSlices = value
        self.repaint()  # Trigger a repaint to update the slice lines

    def setImagePath(self, path):
        print("Setting image path:", path)  # Print the path to verify it is correct
        self.imagePath = path
        pixmap = QPixmap(path)
        print("Pixmap size:", pixmap.size())  # Print the pixmap's size to check if it's loaded correctly
        print("Label size:", self.size())  # Print the label's size
        
        # Scale the image to fit the label's height while preserving aspect ratio
        scaled_pixmap = pixmap.scaledToHeight(self.height(), Qt.SmoothTransformation)
        
        # Check if the scaled width is less than or equal to the label's width
        if scaled_pixmap.width() <= self.width():
            # If the scaled width is within the label's width, show the image as before
            self.setPixmap(scaled_pixmap)
        else:
            # If the scaled width exceeds the label's width, scale the image to fit the label's width while preserving aspect ratio
            scaled_pixmap = pixmap.scaledToWidth(self.width(), Qt.SmoothTransformation)
            self.setPixmap(scaled_pixmap)



    def resizeEvent(self, event):
        if not self.pixmap():
            return
        self.setPixmap(self.pixmap().scaled(self.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def paintEvent(self, event):
        print("paintEvent called")  # Add this line for debugging
        super(ImagePreviewLabel, self).paintEvent(event)
        print("numSlices", self.numSlices)
        if self.pixmap() is not None and self.numSlices > 1:
            print("Drawing lines...")
            painter = QPainter(self)
            scaled_pixmap = self.pixmap().scaled(self.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
            scaled_image_width = scaled_pixmap.width()
            sliceWidth = scaled_image_width / self.numSlices
            painter.setPen(Qt.red)  # Set the pen color to red for slice lines
            for i in range(1, self.numSlices):
                x = int(i * sliceWidth)
                painter.drawLine(x, 0, x, self.height())




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
